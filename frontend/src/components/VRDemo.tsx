import React, { useState, useEffect } from 'react';
import VRScene from './VRScene';
import Controls from './Controls';
import CheckpointModal from './CheckpointModal';
import CheckpointList from './CheckpointList';

interface VRDemoProps {
  panoramaUrl: string;
  initialYaw?: number;     // G√≥c xoay ngang (tr√°i/ph·∫£i) t·ª´ 0-360¬∞
  initialPitch?: number;   // G√≥c xoay d·ªçc (l√™n/xu·ªëng) t·ª´ -90 ƒë·∫øn 90¬∞
  onBack?: () => void;
}

const VRDemo: React.FC<VRDemoProps> = ({ 
  panoramaUrl, 
  initialYaw = 0, 
  initialPitch = 0, 
  onBack 
}) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isAudioEnabled, setIsAudioEnabled] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentYaw, setCurrentYaw] = useState(initialYaw);
  const [currentPitch, setCurrentPitch] = useState(initialPitch);
  const [showControls, setShowControls] = useState(true);
  const [realTimeYaw, setRealTimeYaw] = useState(initialYaw);
  const [realTimePitch, setRealTimePitch] = useState(initialPitch);
  const [zoomLevel, setZoomLevel] = useState(75); // Default FOV = 75 degrees
  const [selectedCheckpoint, setSelectedCheckpoint] = useState<any>(null);
  const [isCheckpointModalOpen, setIsCheckpointModalOpen] = useState(false);
  const [isCheckpointListVisible, setIsCheckpointListVisible] = useState(false);


  const handleFullscreen = async () => {
    try {
      if (!isFullscreen) {
        await document.documentElement.requestFullscreen();
      } else {
        await document.exitFullscreen();
      }
    } catch (err) {
      console.error('Fullscreen error:', err);
    }
  };

  const handleAudioToggle = () => {
    setIsAudioEnabled(!isAudioEnabled);
  };

  const handleImageLoad = () => {
    console.log('Image loaded successfully in VRDemo');
    setIsLoading(false);
    setError(null);
  };

  const handleImageError = () => {
    console.log('Image failed to load in VRDemo');
    setIsLoading(false);
    setError('Failed to load panoramic image. Please check the file path.');
  };

  React.useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, []);

  React.useEffect(() => {
    // Log the panorama URL for debugging
    console.log('VRDemo mounted with panorama URL:', panoramaUrl);
    
    // Test if the image URL is accessible
    fetch(panoramaUrl, { method: 'HEAD' })
      .then(response => {
        if (response.ok) {
          console.log('Panorama URL is accessible:', response.status);
        } else {
          console.error('Panorama URL returned error:', response.status);
          setError(`Failed to access image (${response.status})`);
          setIsLoading(false);
        }
      })
      .catch(err => {
        console.error('Failed to fetch panorama URL:', err);
        setError('Unable to access the panoramic image');
        setIsLoading(false);
      });
  }, [panoramaUrl]);

  // Demo hotspots (just for testing)
  const demoHotspots = [
    {
      id: 1,
      from_scene: 1,
      to_scene: 2,
      yaw: 45,
      pitch: 0,
      label: 'Demo Hotspot',
      size: 1.0,
      color: '#ffffff'
    }
  ];

  // Demo checkpoints for testing - positioned at cardinal directions for easy testing
  const demoCheckpoints = [
    {
      id: 1,
      scene_id: 1,
      yaw: 0,    // North (front)
      pitch: 0,  // Eye level
      title: 'H·ªë s·ª•t 1 (Doline 1)',
      description: 'H·ªë s·ª•t t·ª± nhi√™n ƒë∆∞·ª£c h√¨nh th√†nh b·ªüi qu√° tr√¨nh karst - s·ª± h√≤a tan c·ªßa ƒë√° v√¥i',
      type: 'info' as const,
      content: {
        text: `Doline l√† m·ªôt h·ªë s·ª•t t·ª± nhi√™n ƒë∆∞·ª£c h√¨nh th√†nh th√¥ng qua qu√° tr√¨nh karst - s·ª± h√≤a tan c·ªßa ƒë√° v√¥i b·ªüi n∆∞·ªõc m∆∞a c√≥ t√≠nh axit y·∫øu.

üîç ƒê·∫∑c ƒëi·ªÉm:
‚Ä¢ ƒê∆∞·ªùng k√≠nh: 20-50m
‚Ä¢ ƒê·ªô s√¢u: 10-30m  
‚Ä¢ Tu·ªïi: H√†ng tri·ªáu nƒÉm
‚Ä¢ H·ªá sinh th√°i ƒë·ªôc ƒë√°o b√™n trong

üåø H·ªá sinh th√°i:
B√™n trong h·ªë s·ª•t c√≥ vi kh√≠ h·∫≠u ƒë·∫∑c bi·ªát v·ªõi ƒë·ªô ·∫©m cao v√† nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh, t·∫°o ƒëi·ªÅu ki·ªán cho c√°c lo√†i th·ª±c v·∫≠t ƒë·∫∑c h·ªØu ph√°t tri·ªÉn.

üìç V·ªã tr√≠: Khu v·ª±c karst mi·ªÅn B·∫Øc Vi·ªát Nam`
      },
      size: 3.5,
      color: '#FF6B35',
      icon: 'üï≥Ô∏è'
    },
    {
      id: 2,
      scene_id: 1,
      yaw: 90,   // East (right)
      pitch: 0,  // Eye level
      title: 'Th·ª±c v·∫≠t ƒë·∫∑c h·ªØu',
      description: 'H·ªá th·ª±c v·∫≠t ƒë·ªôc ƒë√°o trong m√¥i tr∆∞·ªùng karst',
      type: 'gallery' as const,
      content: {
        images: [
          './iStock_2170832197.jpg',
          './iStock_2170832197.jpg',
          './iStock_2170832197.jpg'
        ]
      },
      size: 2.5,
      color: '#27AE60',
      icon: 'üåø'
    },
    {
      id: 3,
      scene_id: 1,
      yaw: 180,  // South (back)
      pitch: 0,  // Eye level
      title: 'ƒê·ªãa ch·∫•t karst',
      description: 'C·∫•u tr√∫c ƒë·ªãa ch·∫•t ƒë√° v√¥i ƒë·∫∑c tr∆∞ng',
      type: 'image' as const,
      content: {
        imageUrl: './iStock_2170832197.jpg'
      },
      size: 3,
      color: '#6C7B7F',
      icon: 'üóª'
    },
    {
      id: 4,
      scene_id: 1,
      yaw: 270,  // West (left)
      pitch: 0,  // Eye level
      title: 'Video gi·ªõi thi·ªáu',
      description: 'Video t·ªïng quan v·ªÅ khu v·ª±c karst',
      type: 'video' as const,
      content: {
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4'
      },
      size: 3,
      color: '#E74C3C',
      icon: 'üé•'
    }
  ];

  const handleHotspotClick = (sceneId: number) => {
    console.log('Hotspot clicked, would navigate to scene:', sceneId);
  };

  const handleCheckpointClick = (checkpoint: any) => {
    console.log('Checkpoint clicked:', checkpoint);
    setSelectedCheckpoint(checkpoint);
    setIsCheckpointModalOpen(true);
  };

  const handleCloseCheckpointModal = () => {
    setIsCheckpointModalOpen(false);
    setSelectedCheckpoint(null);
  };

  const handleNavigateToCheckpoint = (yaw: number, pitch: number) => {
    setCurrentYaw(yaw);
    setCurrentPitch(pitch);
  };

  const handleToggleCheckpointList = () => {
    setIsCheckpointListVisible(!isCheckpointListVisible);
  };

  const handleCameraChange = (yaw: number, pitch: number) => {
    setRealTimeYaw(yaw);
    setRealTimePitch(pitch);
    // Ch·ªâ c·∫≠p nh·∫≠t slider n·∫øu l·ªách > 1 ƒë·ªô
    if (Math.abs(Math.round(currentYaw) - Math.round(yaw)) > 1) setCurrentYaw(Math.round(yaw));
    if (Math.abs(Math.round(currentPitch) - Math.round(pitch)) > 1) setCurrentPitch(Math.round(pitch));
  };

  const handleZoomChange = (zoom: number) => {
    setZoomLevel(zoom);
  };

  const copyCurrentPosition = () => {
    const positionText = `initialYaw={${realTimeYaw}} initialPitch={${realTimePitch}}`;
    navigator.clipboard.writeText(positionText).then(() => {
      alert('ƒê√£ copy v·ªã tr√≠ camera!\n\n' + positionText);
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = positionText;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('ƒê√£ copy v·ªã tr√≠ camera!\n\n' + positionText);
    });
  };

  return (
    <div className="vr-demo-container">
      {/* Camera Control Panel */}
      {showControls && (
        <div style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          background: 'rgba(0,0,0,0.9)',
          color: 'white',
          padding: '15px',
          borderRadius: '8px',
          fontSize: '14px',
          zIndex: 1000,
          fontFamily: 'sans-serif',
          minWidth: '200px'
        }}>
          <h4 style={{ margin: '0 0 10px 0' }}>Camera Controls</h4>
          
          <div style={{ marginBottom: '10px' }}>
            <label>Yaw (Ngang): {currentYaw}¬∞</label>
            <input
              type="range"
              min="0"
              max="360"
              value={currentYaw}
              onChange={(e) => setCurrentYaw(Number(e.target.value))}
              style={{ width: '100%', marginTop: '5px' }}
            />
          </div>
          
          <div style={{ marginBottom: '10px' }}>
            <label>Pitch (D·ªçc): {currentPitch}¬∞</label>
            <input
              type="range"
              min="-90"
              max="90"
              value={currentPitch}
              onChange={(e) => setCurrentPitch(Number(e.target.value))}
              style={{ width: '100%', marginTop: '5px' }}
            />
          </div>
          
          <div style={{ marginBottom: '10px' }}>
            <label>Zoom Level: {Math.round((120 - zoomLevel) / 45 * 100)}%</label>
            <input
              type="range"
              min="30"
              max="120"
              value={zoomLevel}
              onChange={(e) => setZoomLevel(Number(e.target.value))}
              style={{ width: '100%', marginTop: '5px' }}
            />
            <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '10px', opacity: 0.7, marginTop: '2px' }}>
              <span>Zoom In</span>
              <span>Normal</span>
              <span>Zoom Out</span>
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '5px', fontSize: '12px' }}>
            <button 
              onClick={() => { 
                setCurrentYaw(0); 
                setCurrentPitch(0); 
                setRealTimeYaw(0);
                setRealTimePitch(0);
                setZoomLevel(75); 
              }}
              style={{ padding: '5px 10px', fontSize: '12px' }}
            >
              Reset All
            </button>
            <button 
              onClick={() => { 
                setCurrentYaw(73); 
                setCurrentPitch(-31); 
                setRealTimeYaw(73);
                setRealTimePitch(-31);
              }}
              style={{ padding: '5px 10px', fontSize: '12px', background: '#28a745', color: 'white', border: 'none', borderRadius: '3px' }}
            >
              üè† Original View
            </button>
            <button 
              onClick={() => {
                const checkpointCode = `{
  id: ${Date.now()},
  scene_id: 1,
  yaw: ${Math.round(realTimeYaw)},
  pitch: ${Math.round(realTimePitch)},
  title: 'New Checkpoint',
  description: 'M√¥ t·∫£ checkpoint',
  type: 'info',
  content: { text: 'N·ªôi dung checkpoint...' },
  size: 3,
  color: '#4A90E2'
}`;
                navigator.clipboard.writeText(checkpointCode);
                alert('üìã ƒê√£ copy code checkpoint v√†o clipboard!');
              }}
              style={{ padding: '5px 10px', fontSize: '12px', background: '#17a2b8', color: 'white', border: 'none', borderRadius: '3px' }}
            >
              üìã Copy Checkpoint
            </button>
            <button 
              onClick={() => setZoomLevel(45)}
              style={{ padding: '5px 10px', fontSize: '12px', background: '#0a84ff', color: 'white', border: 'none', borderRadius: '3px' }}
            >
              üîç+ Zoom In
            </button>
            <button 
              onClick={() => setZoomLevel(105)}
              style={{ padding: '5px 10px', fontSize: '12px', background: '#ff6b35', color: 'white', border: 'none', borderRadius: '3px' }}
            >
              üîç- Zoom Out
            </button>
            <button 
              onClick={() => setShowControls(false)}
              style={{ padding: '5px 10px', fontSize: '12px' }}
            >
              Hide
            </button>
          </div>
          
          <hr style={{ margin: '10px 0', borderColor: '#444' }} />
          
          <div style={{ marginBottom: '10px' }}>
            <h5 style={{ margin: '0 0 5px 0', color: '#0ff' }}>G√≥c nh√¨n hi·ªán t·∫°i:</h5>
            <div style={{ 
              background: '#222', 
              padding: '8px', 
              borderRadius: '4px',
              fontFamily: 'monospace',
              fontSize: '13px'
            }}>
              <div>Yaw: {realTimeYaw}¬∞</div>
              <div>Pitch: {realTimePitch}¬∞</div>
            </div>
            <button 
              onClick={copyCurrentPosition}
              style={{ 
                width: '100%', 
                marginTop: '5px', 
                padding: '8px', 
                background: '#0a84ff',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '12px'
              }}
            >
              üìã Copy v·ªã tr√≠ hi·ªán t·∫°i
            </button>
          </div>

          <hr style={{ margin: '10px 0', borderColor: '#444' }} />

          <div style={{ fontSize: '11px', opacity: 0.7 }}>
            <div>Yaw: 0¬∞=B·∫Øc, 90¬∞=ƒê√¥ng, 180¬∞=Nam, 270¬∞=T√¢y</div>
            <div>Pitch: 0¬∞=Th·∫≥ng, +90¬∞=L√™n, -90¬∞=Xu·ªëng</div>
          </div>
        </div>
      )}

      {/* Show controls button when hidden */}
      {!showControls && (
        <button
          onClick={() => setShowControls(true)}
          style={{
            position: 'absolute',
            top: '10px',
            left: '10px',
            background: 'rgba(0,0,0,0.8)',
            color: 'white',
            border: 'none',
            padding: '10px',
            borderRadius: '5px',
            cursor: 'pointer',
            zIndex: 1000
          }}
        >
          üìπ Camera
        </button>
      )}

      {/* Debug info panel */}
      <div style={{
        position: 'absolute',
        top: '10px',
        right: '10px',
        background: 'rgba(0,0,0,0.8)',
        color: 'white',
        padding: '10px',
        borderRadius: '5px',
        fontSize: '12px',
        zIndex: 1000,
        fontFamily: 'monospace'
      }}>
        <div>Loading: {isLoading ? 'Yes' : 'No'}</div>
        <div>Error: {error || 'None'}</div>
        <div>Real-time: {realTimeYaw}¬∞, {realTimePitch}¬∞</div>
        <div>Zoom FOV: {zoomLevel}¬∞</div>
        <div>Rotate Speed: {Math.round((0.3 + ((zoomLevel - 30) / (120 - 30)) * 0.7) * 100)}%</div>
        <div style={{ color: '#4A90E2' }}>Checkpoints: {demoCheckpoints.length}</div>
        <div style={{ color: '#27AE60', fontSize: '10px', marginTop: '5px' }}>
          Checkpoint positions:
          {demoCheckpoints.map(cp => (
            <div key={cp.id}>#{cp.id}: {cp.yaw}¬∞,{cp.pitch}¬∞</div>
          ))}
        </div>
      </div>

      {isLoading && (
        <div className="demo-loading">
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>Loading 360¬∞ Demo...</p>
            <p style={{ fontSize: '12px', opacity: 0.7 }}>
              Loading: {panoramaUrl}
            </p>
          </div>
        </div>
      )}

      {error && (
        <div className="demo-error">
          <h3>Unable to Load Image</h3>
          <p>{error}</p>
          <p>URL: {panoramaUrl}</p>
          <p>Please check that the image file is accessible.</p>
          <button onClick={() => window.location.reload()}>
            Reload Page
          </button>
        </div>
      )}

      <div className="demo-header">
        <h2>VR Demo - 360¬∞ Panoramic View</h2>
        <p style={{ 
          fontSize: '14px', 
          color: 'rgba(255, 255, 255, 0.7)', 
          marginTop: '5px',
          textShadow: '0 2px 4px rgba(0, 0, 0, 0.5)'
        }}>
          üéØ Click v√†o c√°c checkpoint ƒë·ªÉ xem n·ªôi dung | üìã D√πng "Copy Checkpoint" ƒë·ªÉ t·∫°o checkpoint m·ªõi
        </p>
      </div>

      <div className="demo-viewer">
        <VRScene
          panoramaUrl={panoramaUrl}
          yaw={currentYaw}
          pitch={currentPitch}
          zoomLevel={zoomLevel}
          hotspots={demoHotspots}
          checkpoints={demoCheckpoints}
          onHotspotClick={handleHotspotClick}
          onCheckpointClick={handleCheckpointClick}
          onImageLoad={handleImageLoad}
          onImageError={handleImageError}
          onCameraChange={handleCameraChange}
          onZoomChange={handleZoomChange}
        />

        <Controls
          onBack={onBack}
          onFullscreen={handleFullscreen}
          onAudioToggle={handleAudioToggle}
          isFullscreen={isFullscreen}
          isAudioEnabled={isAudioEnabled}
        />
      </div>

      {/* Checkpoint List */}
      <CheckpointList
        checkpoints={demoCheckpoints}
        onNavigateToCheckpoint={handleNavigateToCheckpoint}
        onCheckpointClick={handleCheckpointClick}
        isVisible={isCheckpointListVisible}
        onToggle={handleToggleCheckpointList}
      />

      {/* Checkpoint Modal */}
      <CheckpointModal
        checkpoint={selectedCheckpoint}
        isOpen={isCheckpointModalOpen}
        onClose={handleCloseCheckpointModal}
      />
    </div>
  );
};

export default VRDemo; 